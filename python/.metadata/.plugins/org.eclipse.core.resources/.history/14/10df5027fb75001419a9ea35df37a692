
    cdef enum: #定义常量的方法
        BLACK = 0
    cdef enum:
        RED = 1
    #graphic elements of rbtree for printing
    VC = '│'
    HC = '─'
    SIZE = 3
    RIG = '┌' + HC * SIZE
    LEF = '└' + HC * SIZE
    SP = chr(32)
    IND1 = SP * (SIZE + 1)
    IND2 = VC + SP * SIZE

    #cdef变量时,声明要放在所有语句之前,不能夹杂在语句中

    cdef class rbnode(object):

        cdef object _key,_value,_color,_left,_right,_p

        def __cinit__(self, key=None, value=None, color=BLACK):
            self._key = key
            self._value = value
            self._color = color
            self._left = None
            self._right = None
            self._p = None
        #定义属性的方法,相当麻烦.包括顶部声明,__cinit__初始化以及property定义三个步骤
        property key:
            def __get__(self):
                return self._key
            def __set__(self,value):
                self._key = value

        property value:
            def __get__(self):
                return self._value
            def __set__(self,value):
                self._value = value

        property color:
            def __get__(self):
                return self._color
            def __set__(self,value):
                self._color = value

        property right:
            def __get__(self):
                return self._right
            def __set__(self,value):
                self._right = value

        property left:
            def __get__(self):
                return self._left
            def __set__(self,value):
                self._left = value

        property p:
            def __get__(self):
                return self._p
            def __set__(self,value):
                self._p = value

        def __repr__(self):
            return '%s%s%s' % (self.key,'◆' if self.color is BLACK else '◇',self.value )


    cdef class rbtree(object):

        cdef _nil,_root,_default_value

        def __cinit__(self, data=None,default_value=0):
            self._nil = rbnode()
            self._root = self._nil
            self._default_value = default_value #for method: force_search
            if hasattr(data, '__iter__'):
                for key, value in data:
                    self.insert(rbnode(key,value))

        property nil:
            def __get__(self):
                return self._nil
            def __set__(self,value):
                self._nil = value

        property root:
            def __get__(self):
                return self._root
            def __set__(self,value):
                self._root = value

        property default_value:
            def __get__(self):
                return self._default_value
            def __set__(self,value):
                self._default_value = value

        def __repr__(self):
            return '\n'.join(self.graph())

        cdef deepth(self):
            if self.root is self.nil:
                return 0
            return max(self._deepth_set(self.root))

        def _deepth_set(self,x,n=0):
            if x is not self.nil:
                if x.left is self.nil and x.right is self.nil:
                    yield n + 1
                else:
                    yield from self._deepth_set(x.left,n+1)
                    yield from self._deepth_set(x.right,n+1)

        def graph(self, rbnode x=None, prefix=''):
            "beautifully print rbtree, big key node first"
            if x is None:
                x = self.root
            if x is not self.nil:
                p = x.p
                last_prefix = ''
                if p is not self.nil:
                    pp = p.p
                    last_prefix = LEF if p.left is x else RIG
                    if pp is not self.nil:
                        if (pp.left is p) is (p.left is x):
                            prefix = prefix + IND1
                        else:
                            prefix = prefix + IND2
                yield from self.graph(x.right, prefix)
                yield '%s%s%s' % (prefix, last_prefix, x)
                yield from self.graph(x.left, prefix)

        cdef rbnode search(self, key, rbnode x=None):
            "find node according to key, return self.nil if not found"
            if x is None:
                x = self.root
            while (x is not self.nil) and (key != x.key):
                if key < x.key:
                    x = x.left
                else:
                    x = x.right
            return x

        cdef insert(self, rbnode z):
            "insert z node with key and value"
            cdef rbnode y = self.nil
            cdef rbnode x = self.root
            while x is not self.nil:
                y = x
                if z.key < x.key:
                    x = x.left
                else:
                    x = x.right
            z.p = y
            if y is self.nil:
                self.root = z
            elif z.key < y.key:
                y.left = z
            else:
                y.right = z
            z.left = self.nil
            z.right = self.nil
            z.color = RED
            self.insert_fixup(z)

        cdef delete(self, rbnode z):
            cdef rbnode y = z
            cdef int y_original_color = y.color
            cdef rbnode x
            if z.left is self.nil:
                x = z.right
                self.transplant(z, x)
            elif z.right is self.nil:
                x = z.left
                self.transplant(z, x)
            else:
                y = self.minimum(z.right)
                y_original_color = y.color
                x = y.right
                if y.p is z:
                    x.p = y
                else:
                    self.transplant(y, x)
                    y.right = z.right
                    y.right.p = y
                self.transplant(z, y)
                y.left = z.left
                y.left.p = y
                y.color = z.color
            if y_original_color is BLACK:
                self.delete_fixup(x)

        def clear(self):
            "delete all nodes"
            while self.root!=self.nil:
                self.delete(self.root)

        def is_empty(self):
            return self.root is self.nil

        def right_walk(self, x=None):
            if x is None:
                x = self.root
            if x is not self.nil:
                yield from self.right_walk(x.right)
                yield x
                yield from self.right_walk(x.left)

        def left_walk(self, x=None):
            if x is None:
                x = self.root
            if x is not self.nil:
                yield from self.left_walk(x.left)
                yield x
                yield from self.left_walk(x.right)

        cdef rbnode force_search(self,key):
            cdef rbnode y = self.nil
            cdef rbnode x = self.root
            while x is not self.nil:
                if key == x.key:
                    return x
                y = x
                if key < x.key:
                    x = x.left
                else:
                    x = x.right
            cdef rbnode z = rbnode()
            cdef rbnode original_z = z
            z.key = key
            z.value = self.default_value
            z.p = y
            if y is self.nil:
                self.root = z
            elif z.key < y.key:
                y.left = z
            else:
                y.right = z
            z.left = self.nil
            z.right = self.nil
            z.color = RED
            self.insert_fixup(z)
            return original_z

        cdef rbnode maximum(self, rbnode x=None):
            if x is None:
                x = self.root
            while x.right is not self.nil:
                x = x.right
            return x

        cdef rbnode minimum(self, rbnode x=None):
            if x is None:
                x = self.root
            while x.left is not self.nil:
                x = x.left
            return x

        cdef rbnode successor(self, rbnode x):
            "return node with smallest key greater than x.key"
            if x.right is not self.nil:
                return self.minimum(x.right)
            cdef rbnode y = x.p
            while (y is not self.nil) and (x is y.right):
                x = y
                y = y.p
            return y

        cdef rbnode predecessor(self, rbnode x):
            "return node with biggest key lower than x.key"
            if x.left is not self.nil:
                return self.maximum(x.left)
            cdef rbnode y = x.p
            while (y is not self.nil) and (x is y.left):
                x = y
                y = y.p
            return y

        cdef left_rotate(self, rbnode x):
            cdef rbnode y = x.right
            x.right = y.left
            if y.left is not self.nil:
                y.left.p = x
            y.p = x.p
            if x.p is self.nil:
                self.root = y
            else:
                if x is x.p.left:
                    x.p.left = y
                else:
                    x.p.right = y
            y.left = x
            x.p = y

        cdef right_rotate(self, rbnode x):
            cdef rbnode y = x.left
            x.left = y.right
            if y.right is not self.nil:
                y.right.p = x
            y.p = x.p
            if x.p is self.nil:
                self.root = y
            else:
                if x is x.p.right:
                    x.p.right = y
                else:
                    x.p.left = y
            y.right = x
            x.p = y

        cdef insert_fixup(self, rbnode z):
            cdef rbnode y
            while z.p.color is RED:
                if z.p is z.p.p.left:
                    y = z.p.p.right
                    if y.color is RED:
                        z.p.color = BLACK
                        y.color = BLACK
                        z.p.p.color = RED
                        z = z.p.p
                    else:
                        if z is z.p.right:
                            z = z.p
                            self.left_rotate(z)
                        z.p.color = BLACK
                        z.p.p.color = RED
                        self.right_rotate(z.p.p)
                else:
                    y = z.p.p.left
                    if y.color is RED:
                        z.p.color = BLACK
                        y.color = BLACK
                        z.p.p.color = RED
                        z = z.p.p
                    else:
                        if z is z.p.left:
                            z = z.p
                            self.right_rotate(z)
                        z.p.color = BLACK
                        z.p.p.color = RED
                        self.left_rotate(z.p.p)
            self.root.color = BLACK

        cdef delete_fixup(self, rbnode x):
            cdef rbnode w
            while (x is not self.root) and (x.color is BLACK):
                if x is x.p.left:
                    w = x.p.right
                    if w.color is RED:
                        w.color = BLACK
                        x.p.color = RED
                        self.left_rotate(x.p)
                        w = x.p.right
                    if (w.left.color is BLACK) and (w.right.color is BLACK):
                        w.color = RED
                        x = x.p
                    else:
                        if w.right.color is BLACK:
                            w.left.color = BLACK
                            w.color = RED
                            self.right_rotate(w)
                            w = x.p.right
                        w.color = x.p.color
                        x.p.color = BLACK
                        w.right.color = BLACK
                        self.left_rotate(x.p)
                        x = self.root
                else:
                    w = x.p.left
                    if w.color is RED:
                        w.color = BLACK
                        x.p.color = RED
                        self.right_rotate(x.p)
                        w = x.p.left
                    if (w.right.color is BLACK) and (w.left.color is BLACK):
                        w.color = RED
                        x = x.p
                    else:
                        if w.left.color is BLACK:
                            w.right.color = BLACK
                            w.color = RED
                            self.left_rotate(w)
                            w = x.p.left
                        w.color = x.p.color
                        x.p.color = BLACK
                        w.left.color = BLACK
                        self.right_rotate(x.p)
                        x = self.root
            x.color = BLACK

        cdef transplant(self, rbnode u, rbnode v):
            if u.p is self.nil:
                self.root = v
            elif u is u.p.left:
                u.p.left = v
            else:
                u.p.right = v
            v.p = u.p

    def test1():
        cdef rbnode nd
        cdef rbtree tr
        trd={'a':7,'b':1,'c':8,'d':2,'e':3}
        tr=rbtree(trd.items())
        print("after build from dict:")
        print(tr)
        print(tr.deepth())
        for c in 'sfsdfsahfweruoiwejuckjdflsfj':
            nd = tr.force_search(c)
            nd.value += 1
        print("\nafter insert from a string:")
        print(tr)
        print(tr.deepth())
        while tr.root!=tr.nil:
            tr.delete(tr.root)
        print("\nafter delete all node:")
        print(tr)

    def test2():
        cdef rbnode nd
        cdef rbtree tr=rbtree()
        with open(r'u8w.txt',encoding='u8') as f:
            for line in f:
                nd = tr.force_search(line[:-1])
                nd.value += 1
        g = open(r'pyres.txt','w',encoding='u8')
        g.write(str(tr))

    if __name__ == '__main__':
        test2()