class Vertex(object):
    def __init__(self,key):
        self.id=key
        self.adj={}
    def addNeighbor(self,nbr,weight=0):
        self.adj[nbr]=weight
    def getNeighbors(self):
        return self.adj.keys()
    def getId(self):
        return self.id
    def getWeight(self,key):
        return self.adj[key]
class Graph(object):
    def __init__(self):
        self.vertexlist={}
        self.size=0
    def addVertex(self,key):
        vertex=Vertex(key)
        self.vertexlist[key]=vertex
        self.size+=1
        return vertex
    def getVertex(self,key):
        return self.vertexlist.get(key)
    def __contains__(self,key):
        if key in self.vertexlist:
            return True
        else:
            return False
    def addEdge(self,f,t,weight=0):
        if f not in self.vertexlist:
            self.addVertex(f)
        if t not in self.vertexlist:
            self.addVertex(t)
        self.vertexlist[f].addNeighbor(self.vertexlist[t],weight)
    def getVertices(self):
        return self.vertexlist.keys()
    def __iter__(self):
        return iter(self.vertexlist.values())

    def topSort(G):
        top=[]
    queue=[]
    inDegree={}
    for v in G:
        inDegree[v]=0
    for v in G:
        for w in v.getNeighbors():
            inDegree[w]+=1
    for v in inDegree:
        if inDegree[v]==0:
            queue.append(v)
    while queue:
        v=queue.pop(0)
        top.append(v)
        for i in v.getNeighbors():
            inDegree[i]-=1
            if inDegree[i]==0:
                queue.append(i)
    return top